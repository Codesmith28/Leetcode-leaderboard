import GroupList from "@/components/GroupList/GroupList";
import SearchBar from "@/components/SearchBar/SearchBar";
import UserList from "@/components/UserList/UserList";
import styles from "@/styles/Home.module.css";
import { TeamData } from "@/util/types";
import Head from "next/head";
import Script from "next/script";
import { useEffect, useState } from "react";
import useSWR from "swr";
import Layout from "./Layout";

interface Info {
  image: string;
  username: string;
  email: string;
  institution: string;
  totalSolved: number;
  easySolved: number;
  mediumSolved: number;
  hardSolved: number;
  ranking: number;
}

export default function Home() {
  const [searchText, setSearchText] = useState("");
  const [page, setPage] = useState(1);
  const [teams, setTeams] = useState<TeamData[]>([]);

  const [userInfo, setUserInfo] = useState<Info>({
    image: "",
    username: "",
    email: "",
    institution: "",
    totalSolved: 0,
    easySolved: 0,
    mediumSolved: 0,
    hardSolved: 0,
    ranking: 0,
  });

  useEffect(() => {
    // to update the info of the user:
    const upDateInfo = async () => {
      const res = await fetch("/api/getInfo", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await res.json();

      const res2 = await fetch(
        `https://leetcode-api-faisalshohag.vercel.app/${data.username}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );
      const data2 = await res2.json();

      // combine the data from the two api calls:
      const combinedInfo: Info = {
        image: data.image,
        username: data.username,
        email: data.email,
        institution: data.institution,
        totalSolved: data2.totalSolved,
        easySolved: data2.easySolved,
        mediumSolved: data2.mediumSolved,
        hardSolved: data2.hardSolved,
        ranking: data2.ranking,
      };
      setUserInfo(combinedInfo);

      // update the database with the data2 in the database:
      const res3 = await fetch("/api/updateInfo", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          _id: data._id,
          easySolved: data2.easySolved,
          mediumSolved: data2.mediumSolved,
          hardSolved: data2.hardSolved,
          totalSolved: data2.totalSolved,
          ranking: data2.ranking,
        }),
      });
      const data3 = await res3.json();
    };

    const getInfo = async () => {
      const res = await fetch("/api/getInfo", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const data = await res.json();
      setUserInfo(data);
    };

    // tp get all the teams:
    const getAllTeams = async () => {
      const res = await fetch("/api/getTeams", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });
      const teamData = await res.json();
      setTeams(teamData);
    };

    upDateInfo();
    getInfo();
    getAllTeams();
  }, []);

  return (
    <>
      <Head>
        <title>LeetCode LeaderBoard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <meta name="color-scheme" content="dark" />
        <Script
          async
          src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS}`}
        />
        <Script
          dangerouslySetInnerHTML={{
            __html: `
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '${process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS}');
          `,
          }}
        />
      </Head>
      <main>
        <Layout>
          <div>
            <SearchBar
              searchQuery={searchText}
              setSearchQuery={setSearchText}
              setPage={setPage}
            />
            {teams && userInfo && (
              <GroupList teamData={teams} myInsti={userInfo.institution} />
            )}
            {/* <Pagination page={page} setPage={setPage} items={teams} /> */}
          </div>
        </Layout>
      </main>
    </>
  );
}
